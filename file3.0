{"cells":[{"cell_type":"code","source":["## Import Libraries used to perform analysis\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import statsmodels.api as sm\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"z4oBTzsaqzvx","executionInfo":{"status":"ok","timestamp":1759590927222,"user_tz":-420,"elapsed":18,"user":{"displayName":"SUTATIP SRISRANGKHOM","userId":"16710686380944436427"}}},"execution_count":62,"outputs":[]},{"cell_type":"code","source":["# Import file from your computer\n","\n","from google.colab import files\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":39},"id":"EOdm7LRprKlp","outputId":"63123748-db5b-4567-85f9-f5c7b290c7ea"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-1434d699-ed07-4767-8d8d-f5725f667a0b\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-1434d699-ed07-4767-8d8d-f5725f667a0b\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}}]},{"cell_type":"code","source":["#Import file and assign it as df\n","\n","import io\n","\n","df = pd.read_csv(io.BytesIO(uploaded['auto-mpg (1).csv']))\n","\n","print(df.head())"],"metadata":{"id":"dxEHliGquZ8y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"xCkANb00uyfd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.tail()"],"metadata":{"id":"hCNVLX3Vu0hl"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"70b7b99a"},"source":["# Assigning X variables (Independent Variables) and Y Variable (Dependent Variable)\n","df = df[df['horsepower'] != '?']\n","df['horsepower'] = df['horsepower'].astype(int)\n","\n","X = df[['cylinders','displacement','horsepower','weight','acceleration','model year','origin']]\n","X = sm.add_constant(X)\n","y = df['mpg']"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = sm.OLS(y,X).fit()\n"],"metadata":{"id":"mU6DZ_BHvWTy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["np.asarray(df)"],"metadata":{"id":"QYU-BwONv8ZQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(df.dtypes)"],"metadata":{"id":"XTK3YSMOwE4S"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(df['horsepower'].unique())\n","print(df['horsepower'].value_counts())"],"metadata":{"id":"cFVYnwZdwJBG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Spotting any error in the dataset\n","## There is something as an object NOT the number which we want to analyse\n","\n","df[df['horsepower'] == '?']"],"metadata":{"id":"tWqQjOAEwYwk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# horsepower is object !!!\n","## remove horsepower = ?\n","\n","df = df[df['horsepower'] != '?']\n","df['horsepower'] = df['horsepower'].astype(int)"],"metadata":{"id":"Z-SNhsbuwcb4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = df[['cylinders','displacement','horsepower','weight','acceleration','model year','origin']]\n","X = sm.add_constant(X)\n","y = df['mpg']"],"metadata":{"id":"J4Ej_uiBwd30"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = sm.OLS(y,X).fit()"],"metadata":{"id":"AnH1O_KcwlkE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.params"],"metadata":{"id":"dY7SA-YywmFH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Assuming 'X' and 'Y' are your data and 'results' is your fitted model object\n","\n","# Get the predicted values\n","y_pred = model.predict(X)\n","\n","# Plot the predictions vs actual values\n","plt.figure(figsize=(10, 6))\n","plt.scatter(y, y_pred, alpha=0.5)\n","plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linestyle='--')\n","plt.xlabel('Actual Values')\n","plt.ylabel('Predicted Values')\n","plt.title('Predicted vs Actual Values')\n","plt.grid(True)\n","plt.show()\n","\n","# Show the statistical summary\n","print(model.summary())"],"metadata":{"id":"iCHkrAiNwnib"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Having train / test sample"],"metadata":{"id":"P9BKlznuw5iP"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 20, random_state=123)"],"metadata":{"id":"6Ncsbo5Vw75I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lr = sm.OLS(y_train,X_train).fit()"],"metadata":{"id":"BbOJqj4cxMqC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lr.params"],"metadata":{"id":"q0DtzzWcxO1W"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lr.summary()"],"metadata":{"id":"nYFzsu78xQ-d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Get the predicted values\n","y_pred = lr.predict(X_test)\n","\n","# Plot the predictions vs actual values\n","plt.figure(figsize=(10, 6))\n","plt.scatter(y_test, y_pred, alpha=0.5)\n","plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linestyle='--')\n","plt.xlabel('Actual Values')\n","plt.ylabel('Predicted Values')\n","plt.title('Predicted vs Actual Values')\n","plt.grid(True)\n","plt.show()\n","\n","# Show the statistical summary\n","print(lr.summary())"],"metadata":{"id":"RAX2aH-AxU_I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","# Assuming 'X' and 'Y' are your data and 'results' is your fitted model object\n","\n","# Get the predicted values\n","y_pred = model.predict(X_test)\n","\n","# Plot the predictions vs actual values\n","plt.figure(figsize=(10, 6))\n","plt.scatter(y_test, y_pred, alpha=0.5)\n","plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linestyle='--')\n","plt.xlabel('Actual Values')\n","plt.ylabel('Predicted Values')\n","plt.title('Predicted vs Actual Values')\n","plt.grid(True)\n","plt.show()\n","\n","# Show the statistical summary\n","print(model.summary())"],"metadata":{"id":"MHyAMIP5xnVO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a_model = pd.DataFrame(model.predict(X_test), columns = ['y_pred']).join(pd.DataFrame(y_test).rename({'mpg':'y_true'},axis = 1))\n","b_model = pd.DataFrame(lr.predict(X_test), columns = ['y_pred']).join(pd.DataFrame(y_test).rename({'mpg':'y_true'},axis = 1))"],"metadata":{"id":"WOdzxynzyD2n"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(f\"fit all data model -> MAE : {abs(a_model['y_pred'] - a_model['y_true']).sum()}\")\n","print(f\"fit training data model -> MAE : {abs(b_model['y_pred'] - b_model['y_true']).sum()}\")\n","\n","# of course the all data model has seen the test data that's why it is more fit than the other model"],"metadata":{"id":"ZOg8MHjWyKGn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Function"],"metadata":{"id":"q_VF4_7CyO_r"}},{"cell_type":"code","source":["def model_prediction(df, X_col, train_test = False):\n","    X = df[X_col]\n","    X = sm.add_constant(X)\n","    y = df['mpg']\n","    if train_test == False:\n","        model = sm.OLS(y,X).fit()\n","        print(model.params)\n","\n","        # Assuming 'X' and 'y' are your data and 'results' is your fitted model object\n","\n","        # Get the predicted values\n","        y_pred = model.predict(X)\n","\n","        # Plot the predictions vs actual values\n","        plt.figure(figsize=(10, 6))\n","        plt.scatter(y, y_pred, alpha=0.5)\n","        plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linestyle='--')\n","        plt.xlabel('Actual Values')\n","        plt.ylabel('Predicted Values')\n","        plt.title('Predicted vs Actual Values')\n","        plt.grid(True)\n","        plt.show()\n","\n","        # Show the statistical summary\n","        print(model.summary())\n","        res = pd.DataFrame(model.predict(X), columns = ['y_pred']).join(pd.DataFrame(y).rename({'mpg':'y_true'},axis = 1))\n","        print(f\"MSE : {((res['y_pred'] - res['y_true'])**2).mean()} \")\n","        print(f\"MAE : {(abs(res['y_pred'] - res['y_true'])).mean()} \")\n","\n","    else:\n","        X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 20, random_state=123)\n","        model = sm.OLS(y_train,X_train).fit()\n","        print(model.params)\n","\n","        # Assuming 'X' and 'y' are your data and 'results' is your fitted model object\n","\n","        # Get the predicted values\n","        y_pred = model.predict(X_test)\n","\n","        # Plot the predictions vs actual values\n","        plt.figure(figsize=(10, 6))\n","        plt.scatter(y_test, y_pred, alpha=0.5)\n","        plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linestyle='--')\n","        plt.xlabel('Actual Values')\n","        plt.ylabel('Predicted Values')\n","        plt.title('Predicted vs Actual Values')\n","        plt.grid(True)\n","        plt.show()\n","\n","        # Show the statistical summary\n","        print(model.summary())\n","        print('------------------------------------------------')\n","        res = pd.DataFrame(model.predict(X_test), columns = ['y_pred']).join(pd.DataFrame(y_test).rename({'mpg':'y_true'},axis = 1))\n","        print(f\"MSE : {((res['y_pred'] - res['y_true'])**2).mean()} \")\n","        print(f\"MAE : {(abs(res['y_pred'] - res['y_true'])).mean()} \")\n","\n","    return model"],"metadata":{"id":"lUId-l3hyRR-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.columns"],"metadata":{"id":"MZAHAqPdyZ3A"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_prediction(df,\n","                ['cylinders', 'displacement', 'horsepower', 'weight','acceleration', 'model year', 'origin'],\n","                 train_test = False)"],"metadata":{"id":"Uw_M0dE3ycCv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_prediction(df,['displacement','horsepower','weight','acceleration','model year','origin'], train_test = True)"],"metadata":{"id":"N6WWL9kTyemq"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1759589426731}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}